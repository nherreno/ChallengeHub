from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from dotenv import load_dotenv
import os
from time import sleep
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
import random
import re

# Cargar variables de entorno
load_dotenv()

USERNAME = "nico.proyecx6@gmail.com"
PASSWORD = os.getenv('PASSWORD')

# Solicitar el usuario a revisar
print("üîç INSTAGRAM ACCOUNT CREATION DATE CHECKER")
print("="*50)
usuario_objetivo = input("üë§ Ingresa el nombre de usuario de Instagram a revisar (sin @): ").strip()

# Validar entrada
if not usuario_objetivo:
    print("‚ùå Error: Debes ingresar un nombre de usuario v√°lido")
    exit()

# Remover @ si lo incluy√≥ el usuario
if usuario_objetivo.startswith('@'):
    usuario_objetivo = usuario_objetivo[1:]

print(f"üéØ Revisando fecha de creaci√≥n de: @{usuario_objetivo}")
print("="*50)

# Ruta del chromedriver (ajustar seg√∫n tu sistema)
chromedriver_path = "C:\\Users\\User\\OneDrive - Universidad Nacional de Colombia\\Escritorio\\codigo_Prueba\\chromedriver\\chromedriver-win64\\chromedriver.exe"

def obtener_fecha_creacion_cuenta(driver, username):
    """
    Obtiene la fecha de creaci√≥n de una cuenta de Instagram
    """
    try:
        print(f"üìÖ Obteniendo fecha de creaci√≥n de @{username}...")
        
        # Navegar al perfil
        perfil_url = f"https://www.instagram.com/{username}/"
        driver.get(perfil_url)
        sleep(random.uniform(4, 6))
        
        # Verificar que el perfil existe
        try:
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, "header"))
            )
            print(f"‚úÖ Perfil de @{username} encontrado")
        except:
            print(f"‚ùå No se pudo cargar el perfil de @{username}")
            return None
        
        # DEBUG: Imprimir elementos SVG encontrados
        print("üîç DEBUG: Buscando todos los elementos SVG en el header...")
        try:
            svg_elements = driver.find_elements(By.XPATH, "//header//svg")
            print(f"üìä Encontrados {len(svg_elements)} elementos SVG en el header")
            
            for i, svg in enumerate(svg_elements):
                try:
                    aria_label = svg.get_attribute('aria-label') or 'Sin aria-label'
                    parent_class = svg.find_element(By.XPATH, "..").get_attribute('class') or 'Sin clase'
                    print(f"  SVG {i+1}: aria-label='{aria_label}', parent_class='{parent_class[:50]}'")
                except:
                    print(f"  SVG {i+1}: Error obteniendo atributos")
        except Exception as e:
            print(f"‚ùå Error en debug de SVG: {e}")
        
        # DEBUG: Buscar botones en el header
        print("üîç DEBUG: Buscando botones en el header...")
        try:
            buttons = driver.find_elements(By.XPATH, "//header//button")
            print(f"üìä Encontrados {len(buttons)} botones en el header")
            
            for i, btn in enumerate(buttons):
                try:
                    aria_label = btn.get_attribute('aria-label') or 'Sin aria-label'
                    class_name = btn.get_attribute('class') or 'Sin clase'
                    print(f"  Bot√≥n {i+1}: aria-label='{aria_label}', class='{class_name[:50]}'")
                except:
                    print(f"  Bot√≥n {i+1}: Error obteniendo atributos")
        except Exception as e:
            print(f"‚ùå Error en debug de botones: {e}")
        
        # Buscar el bot√≥n de opciones con m√∫ltiples estrategias
        try:
            print("üîç Buscando bot√≥n de opciones...")
            
            # Estrategias m√°s amplias para encontrar el bot√≥n de opciones
            estrategias_opciones = [
                # Estrategia 1: Por aria-label
                ("Por aria-label 'Options'", "//button[@aria-label='Options']"),
                ("Por aria-label 'Opciones'", "//button[@aria-label='Opciones']"),
                ("Por aria-label que contenga 'option'", "//button[contains(@aria-label, 'ption')]"),
                
                # Estrategia 2: Por SVG espec√≠ficos
                ("SVG con tres puntos", "//svg[contains(@aria-label, 'Options')]//parent::button"),
                ("SVG con tres puntos v2", "//svg[contains(@aria-label, 'Opciones')]//parent::button"),
                
                # Estrategia 3: Por posici√≥n en el header
                ("√öltimo bot√≥n del header", "//header//button[last()]"),
                ("Pen√∫ltimo bot√≥n del header", "//header//button[last()-1]"),
                
                # Estrategia 4: Por div clickeable
                ("Div role button en header", "//header//div[@role='button']"),
                
                # Estrategia 5: Botones sin aria-label espec√≠fico
                ("Botones sin texto visible", "//header//button[not(text())]"),
                
                # Estrategia 6: Tu XPath original modificado
                ("XPath espec√≠fico original", '//*[@id="mount_0_0_9l"]/div/div/div[2]/div/div/div[1]/div[2]/div/div[1]/section/main/div/header/section[2]/div/div/div[3]/div/div/svg/..'),
                
                # Estrategia 7: B√∫squeda m√°s gen√©rica
                ("Elementos clickeables en header", "//header//*[@role='button' or @tabindex='0']")
            ]
            
            boton_opciones = None
            for descripcion, selector in estrategias_opciones:
                try:
                    print(f"üîç Probando: {descripcion}")
                    elementos = driver.find_elements(By.XPATH, selector)
                    
                    if elementos:
                        print(f"  ‚úÖ Encontrados {len(elementos)} elementos")
                        # Intentar con cada elemento encontrado
                        for i, elemento in enumerate(elementos):
                            try:
                                # Verificar si es clickeable
                                if elemento.is_displayed() and elemento.is_enabled():
                                    boton_opciones = elemento
                                    print(f"  üéØ Elemento {i+1} es clickeable, usando este")
                                    break
                            except:
                                continue
                        
                        if boton_opciones:
                            break
                    else:
                        print(f"  ‚ùå No encontrado")
                        
                except Exception as e:
                    print(f"  ‚ùå Error: {str(e)[:50]}...")
                    continue
            
            if not boton_opciones:
                print(f"‚ùå No se pudo encontrar el bot√≥n de opciones para @{username}")
                print("üí° Intentando hacer screenshot para debug...")
                try:
                    driver.save_screenshot(f"debug_{username}.png")
                    print(f"üì∑ Screenshot guardado como debug_{username}.png")
                except:
                    pass
                return None
            
            print("üñ±Ô∏è Haciendo clic en opciones...")
            # Scroll al elemento primero
            driver.execute_script("arguments[0].scrollIntoView(true);", boton_opciones)
            sleep(1)
            
            # Intentar clic normal primero, luego JavaScript
            try:
                boton_opciones.click()
            except:
                print("üîÑ Clic normal fall√≥, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", boton_opciones)
            
            sleep(random.uniform(3, 5))
            print("‚úÖ Clic en opciones realizado")
            
        except Exception as e:
            print(f"‚ùå Error al hacer clic en opciones: {str(e)[:50]}...")
            return None

        # DEBUG: Ver qu√© modal se abri√≥
        print("üîç DEBUG: Analizando modal abierto...")
        try:
            # Buscar cualquier modal o dialog abierto
            modals = driver.find_elements(By.XPATH, "//div[@role='dialog']")
            if modals:
                print(f"üìä Encontrados {len(modals)} modals abiertos")
                for i, modal in enumerate(modals):
                    try:
                        buttons_in_modal = modal.find_elements(By.TAG_NAME, "button")
                        print(f"  Modal {i+1}: {len(buttons_in_modal)} botones")
                        for j, btn in enumerate(buttons_in_modal):
                            try:
                                text = btn.text.strip() or 'Sin texto'
                                aria_label = btn.get_attribute('aria-label') or 'Sin aria-label'
                                print(f"    Bot√≥n {j+1}: '{text}' | aria-label: '{aria_label}'")
                            except:
                                print(f"    Bot√≥n {j+1}: Error obteniendo texto")
                    except:
                        print(f"  Modal {i+1}: Error analizando botones")
            else:
                print("‚ùå No se encontraron modals abiertos")
                
        except Exception as e:
            print(f"‚ùå Error en debug de modal: {e}")

        # Buscar el bot√≥n "Informaci√≥n de esta cuenta" con estrategias mejoradas
        try:
            print("üîç Buscando bot√≥n 'Informaci√≥n de esta cuenta'...")
            
            # Estrategias para encontrar el bot√≥n de informaci√≥n
            estrategias_info = [
                # Texto exacto
                ("Texto 'Informaci√≥n de esta cuenta'", "//button[contains(text(), 'Informaci√≥n de esta cuenta')]"),
                ("Texto 'About this account'", "//button[contains(text(), 'About this account')]"),
                
                # Por posici√≥n en modal
                ("Bot√≥n 5 en dialog", "//div[@role='dialog']//button[5]"),
                ("Bot√≥n 4 en dialog", "//div[@role='dialog']//button[4]"),
                ("Bot√≥n 6 en dialog", "//div[@role='dialog']//button[6]"),
                
                # Tu XPath espec√≠fico y variaciones
                ("XPath espec√≠fico original", "/html/body/div[6]/div[1]/div/div[2]/div/div/div/div/div/button[5]"),
                ("XPath div[5]", "/html/body/div[5]/div[1]/div/div[2]/div/div/div/div/div/button[5]"),
                ("XPath div[7]", "/html/body/div[7]/div[1]/div/div[2]/div/div/div/div/div/button[5]"),
                
                # B√∫squeda m√°s gen√©rica
                ("Botones que contengan 'cuenta'", "//button[contains(text(), 'cuenta')]"),
                ("Botones que contengan 'account'", "//button[contains(text(), 'account')]"),
                ("Botones que contengan 'informaci√≥n'", "//button[contains(text(), 'informaci√≥n')]"),
                ("Botones que contengan 'about'", "//button[contains(text(), 'about')]"),
                
                # Por aria-label
                ("Aria-label informaci√≥n", "//button[contains(@aria-label, 'informaci√≥n')]"),
                ("Aria-label about", "//button[contains(@aria-label, 'about')]"),
            ]
            
            boton_info = None
            for descripcion, selector in estrategias_info:
                try:
                    print(f"üîç Probando: {descripcion}")
                    elementos = driver.find_elements(By.XPATH, selector)
                    
                    if elementos:
                        print(f"  ‚úÖ Encontrados {len(elementos)} elementos")
                        for i, elemento in enumerate(elementos):
                            try:
                                if elemento.is_displayed() and elemento.is_enabled():
                                    texto = elemento.text.strip()
                                    aria_label = elemento.get_attribute('aria-label') or ''
                                    print(f"    Elemento {i+1}: '{texto}' | aria: '{aria_label}'")
                                    
                                    # Verificar si es el bot√≥n correcto
                                    if ('informaci√≥n' in texto.lower() or 'about' in texto.lower() or 
                                        'informaci√≥n' in aria_label.lower() or 'about' in aria_label.lower()):
                                        boton_info = elemento
                                        print(f"  üéØ Este parece ser el bot√≥n correcto")
                                        break
                            except:
                                continue
                        
                        if not boton_info and elementos:
                            # Si no encontramos el bot√≥n espec√≠fico pero hay elementos, usar el primero
                            boton_info = elementos[0]
                            print(f"  üîÑ Usando el primer elemento encontrado")
                        
                        if boton_info:
                            break
                    else:
                        print(f"  ‚ùå No encontrado")
                        
                except Exception as e:
                    print(f"  ‚ùå Error: {str(e)[:50]}...")
                    continue
            
            if not boton_info:
                print("‚ùå No se pudo encontrar el bot√≥n 'Informaci√≥n de esta cuenta'")
                print("üí° Intentando hacer screenshot del modal...")
                try:
                    driver.save_screenshot(f"modal_debug_{username}.png")
                    print(f"üì∑ Screenshot del modal guardado como modal_debug_{username}.png")
                except:
                    pass
                return None
            
            print("üñ±Ô∏è Haciendo clic en 'Informaci√≥n de esta cuenta'...")
            
            # Scroll al elemento
            driver.execute_script("arguments[0].scrollIntoView(true);", boton_info)
            sleep(1)
            
            # Intentar clic
            try:
                boton_info.click()
            except:
                print("üîÑ Clic normal fall√≥, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", boton_info)
            
            sleep(random.uniform(3, 5))
            print("‚úÖ Clic en informaci√≥n de cuenta realizado")
            
        except Exception as e:
            print(f"‚ùå Error al hacer clic en informaci√≥n de cuenta: {str(e)[:50]}...")
            return None

        # Buscar la fecha en el HTML usando m√∫ltiples estrategias
        try:
            print("üìÖ Buscando fecha en la informaci√≥n de la cuenta...")
            
            # Estrategia 1: Buscar por texto espec√≠fico
            selectores_fecha = [
                "//span[contains(text(),'Fecha en la que te uniste')]/following-sibling::span",
                "//span[contains(text(),'Date joined')]/following-sibling::span",
                "//span[contains(text(),'Mayo de') or contains(text(), 'Enero de') or contains(text(), 'Febrero de') or contains(text(), 'Marzo de') or contains(text(), 'Abril de') or contains(text(), 'Junio de') or contains(text(), 'Julio de') or contains(text(), 'Agosto de') or contains(text(), 'Septiembre de') or contains(text(), 'Octubre de') or contains(text(), 'Noviembre de') or contains(text(), 'Diciembre de')]",
                "//*[contains(text(), 'uniste')]/..//span[contains(text(), '20')]",
                "//*[contains(text(), 'joined')]/..//span[contains(text(), '20')]"
            ]
            
            fecha = None
            
            # Intentar encontrar la fecha con los selectores
            for i, selector in enumerate(selectores_fecha):
                try:
                    print(f"üîç Probando selector fecha {i+1}/{len(selectores_fecha)}...")
                    fecha_elements = driver.find_elements(By.XPATH, selector)
                    
                    for element in fecha_elements:
                        texto = element.text.strip()
                        if texto and len(texto) > 3 and ('de' in texto.lower() or any(month in texto.lower() for month in ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'])):
                            fecha = texto
                            print(f"‚úÖ Fecha encontrada con selector {i+1}: {fecha}")
                            break
                    
                    if fecha:
                        break
                        
                except Exception as e:
                    print(f"‚ùå Selector fecha {i+1} fall√≥: {str(e)[:30]}...")
                    continue
            
            # Estrategia 2: Buscar en todo el HTML de la p√°gina si no encontramos con selectores espec√≠ficos
            if not fecha:
                print("üîç Buscando fecha en todo el HTML de la p√°gina...")
                try:
                    page_source = driver.page_source
                    
                    # Patrones de fecha en espa√±ol
                    patrones_fecha = [
                        r'(Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Septiembre|Octubre|Noviembre|Diciembre)\s+de\s+\d{4}',
                        r'\b(Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Septiembre|Octubre|Noviembre|Diciembre)\s+\d{4}\b',
                        r'\b(January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{4}\b'
                    ]
                    
                    for patron in patrones_fecha:
                        matches = re.findall(patron, page_source, re.IGNORECASE)
                        if matches:
                            if isinstance(matches[0], tuple):
                                fecha = ' '.join(matches[0])
                            else:
                                fecha = matches[0]
                            print(f"‚úÖ Fecha encontrada en HTML: {fecha}")
                            break
                
                except Exception as e:
                    print(f"‚ùå Error buscando en HTML: {str(e)[:50]}...")
            
            # Estrategia 3: Obtener el outerHTML de elementos que contengan fechas
            if not fecha:
                print("üîç Analizando outerHTML de elementos con fechas...")
                try:
                    # Buscar elementos que puedan contener la fecha
                    elementos_fecha = driver.find_elements(By.XPATH, "//*[contains(text(), '201') or contains(text(), '202')]")
                    
                    for elemento in elementos_fecha:
                        try:
                            outer_html = elemento.get_attribute('outerHTML')
                            texto = elemento.text.strip()
                            
                            if texto and len(texto) > 4 and any(month in texto.lower() for month in ['mayo', 'enero', 'febrero', 'marzo', 'abril', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre', 'may', 'january', 'february', 'march', 'april', 'june', 'july', 'august', 'september', 'october', 'november', 'december']):
                                fecha = texto
                                print(f"‚úÖ Fecha encontrada en outerHTML: {fecha}")
                                print(f"üìù OuterHTML: {outer_html[:200]}...")
                                break
                                
                        except:
                            continue
                            
                except Exception as e:
                    print(f"‚ùå Error analizando outerHTML: {str(e)[:50]}...")
            
            if fecha and len(fecha) > 3:
                # Cerrar modales
                try:
                    # Intentar cerrar con ESC
                    from selenium.webdriver.common.keys import Keys
                    driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
                    sleep(1)
                    driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
                    sleep(1)
                except:
                    pass
                    
                return fecha
            else:
                print(f"‚ùå No se pudo extraer la fecha de @{username}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error al buscar fecha: {str(e)[:50]}...")
            return None
        
    except Exception as e:
        print(f"‚ùå Error general al obtener fecha de @{username}: {str(e)[:50]}...")
        return None
    finally:
        # Intentar cerrar cualquier modal abierto
        try:
            from selenium.webdriver.common.keys import Keys
            driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
            sleep(1)
        except:
            pass

def iniciar_driver():
    """Inicializa el driver de Chrome con configuraciones anti-detecci√≥n"""
    options = Options()
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/136.0.0.0 Safari/537.36")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    try:
        service = Service(chromedriver_path)
        driver = webdriver.Chrome(service=service, options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        return driver
    except Exception as e:
        print(f"‚ùå Error al iniciar el driver: {e}")
        print("üí° Verifica que la ruta del chromedriver sea correcta")
        exit()

# PROGRAMA PRINCIPAL
def main():
    print("üöÄ Iniciando navegador...")
    driver = iniciar_driver()
    driver.maximize_window()

    try:
        # Ir a Instagram
        print("üì± Navegando a Instagram...")
        driver.get('https://www.instagram.com/')
        sleep(3)

        # Proceso de login
        print("üîê Iniciando sesi√≥n...")
        try:
            username_field = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.NAME, 'username'))
            )
            username_field.send_keys(USERNAME)

            password_field = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.NAME, 'password'))
            )
            password_field.send_keys(PASSWORD)

            login_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[@type='submit']"))
            )
            login_button.click()

            print("‚ö†Ô∏è Si Instagram solicita verificaci√≥n, ingr√©sala manualmente en el navegador.")
            input("Presiona Enter cuando hayas completado el login/verificaci√≥n...")

            sleep(3)
            print("‚úÖ Login completado")

        except Exception as e:
            print(f"‚ùå Error durante el login: {e}")
            driver.quit()
            return

        # Obtener fecha de creaci√≥n
        print(f"\nüîç Buscando informaci√≥n de @{usuario_objetivo}...")
        fecha_creacion = obtener_fecha_creacion_cuenta(driver, usuario_objetivo)
        
        # Mostrar resultados
        print("\n" + "="*60)
        print("üìä RESULTADO FINAL")
        print("="*60)
        
        if fecha_creacion:
            print(f"üë§ Usuario: @{usuario_objetivo}")
            print(f"üìÖ Fecha de creaci√≥n: {fecha_creacion}")
            print(f"‚è∞ Consultado el: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            print("‚úÖ ¬°Informaci√≥n obtenida exitosamente!")
        else:
            print(f"‚ùå No se pudo obtener la fecha de creaci√≥n de @{usuario_objetivo}")
            print("üí° Posibles causas:")
            print("   - La cuenta es privada")
            print("   - La cuenta no existe")
            print("   - Instagram cambi√≥ su estructura")
            print("   - Problemas de conexi√≥n")
            print("   - Los XPaths han cambiado")
        
        print("="*60)

    except Exception as e:
        print(f"‚ùå Error general: {e}")
    
    finally:
        print("\nüîö Cerrando navegador...")
        driver.quit()
        print("‚úÖ Proceso finalizado")

if __name__ == "__main__":
    main()