from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from dotenv import load_dotenv
import os
from time import sleep
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from datetime import datetime
import random
import re
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
# Cargar variables de entorno
load_dotenv()

USERNAME = "nico.proyecx6@gmail.com"
PASSWORD = os.getenv('PASSWORD')

# Solicitar el usuario a buscar
print("üîç INSTAGRAM FOLLOWERS SCRAPER")
print("="*50)
usuario_objetivo = input("üë§ Ingresa el nombre de usuario de Instagram a buscar (sin @): ").strip()

# Validar entrada
if not usuario_objetivo:
    print("‚ùå Error: Debes ingresar un nombre de usuario v√°lido")
    exit()

# Remover @ si lo incluy√≥ el usuario
if usuario_objetivo.startswith('@'):
    usuario_objetivo = usuario_objetivo[1:]

print(f"üéØ Buscando seguidores de: @{usuario_objetivo}")
print("="*50)

# Ruta correcta del chromedriver
chromedriver_path = "C:\\Users\\User\\OneDrive - Universidad Nacional de Colombia\\Escritorio\\codigo_Prueba\\chromedriver\\chromedriver-win64\\chromedriver.exe"

def obtener_fecha_union(driver, username):
    """
    Obtiene la fecha de uni√≥n de un usuario a Instagram
    """
    try:
        perfil_url = f"https://www.instagram.com/{username}/"
        print(f"üìÖ Obteniendo fecha de uni√≥n de @{username}...")
        driver.get(perfil_url)
        sleep(random.uniform(2, 3))

        # Buscar el bot√≥n de opciones
        boton_opciones = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Options' or @aria-label='Opciones']"))
        )
        boton_opciones.click()
        sleep(random.uniform(1.5, 2.5))

        # Buscar la fecha de uni√≥n
        fecha_xpath = "//span[contains(text(),'Fecha en la que te uniste')]/following-sibling::span"
        fecha_element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, fecha_xpath))
        )
        fecha = fecha_element.text
        
        # Cerrar el men√∫ de opciones haciendo clic fuera
        driver.execute_script("document.body.click();")
        sleep(1)
        
        return fecha
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo obtener fecha de @{username}: {str(e)[:50]}...")
        
        # Intentar cerrar cualquier modal abierto
        try:
            driver.execute_script("document.body.click();")
            sleep(1)
        except:
            pass
            
        return "Fecha no encontrada"

def es_username_valido(username):
    """
    Valida si un username es v√°lido seg√∫n las reglas de Instagram
    y no es parte de las p√°ginas especiales de Instagram
    """
    if not username or len(username) == 0:
        return False
    
    # Lista completa de p√°ginas especiales y patrones a excluir
    paginas_especiales = {
        # P√°ginas principales de Instagram
        'explore', 'reels', 'tv', 'stories', 'accounts', 'direct', 'about',
        'followers', 'following', 'inbox', 'locations', 'lite',
        'help', 'legal', 'privacy', 'safety', 'api', 'blog',
        'business', 'community', 'developers', 'support', 'press',
        'careers', 'brand', 'download', 'create', 'features',
        
        # Par√°metros especiales
        '?entrypoint=web_footer', 'entrypoint=web_footer'
    }
    
    # Normalizar username (remover caracteres especiales para la comparaci√≥n)
    username_clean = username.lower().strip()
    
    # 1. Verificar si es una p√°gina especial
    if username_clean in paginas_especiales:
        return False
    
    # 2. Verificar si contiene par√°metros de URL
    if '?' in username or '&' in username or '=' in username:
        return False
    
    # 3. Verificar patrones de IDs temporales de Instagram (como DJ4EA7ZIaj7)
    # Estos suelen tener patrones espec√≠ficos: 2-3 letras seguidas de caracteres alfanum√©ricos
    patron_id_temporal = re.compile(r'^[A-Z]{2,3}[A-Za-z0-9_-]{6,}$')
    if patron_id_temporal.match(username):
        return False
    
    # 4. Verificar usernames que son solo n√∫meros o caracteres extra√±os
    if username.isdigit():
        return False
    
    # 5. Verificar longitud m√≠nima y m√°xima (Instagram permite 1-30 caracteres)
    if len(username) < 1 or len(username) > 30:
        return False
    
    # 6. Verificar que no contenga solo caracteres especiales
    if re.match(r'^[._-]+$', username):
        return False
    
    # 7. Verificar que no empiece o termine con punto
    if username.startswith('.') or username.endswith('.'):
        return False
    
    # 8. Verificar que no contenga espacios
    if ' ' in username:
        return False
    
    # 9. Verificar que solo contenga caracteres v√°lidos para Instagram
    # Instagram permite: letras, n√∫meros, puntos, guiones bajos
    patron_valido = re.compile(r'^[a-zA-Z0-9._]+$')
    if not patron_valido.match(username):
        return False
    
    # 10. Verificar que no sea el propio usuario objetivo
    if username.lower() == usuario_objetivo.lower():
        return False
    
    return True

def limpiar_username(link):
    """
    Extrae y limpia el username de un enlace de Instagram
    """
    try:
        if not link or not isinstance(link, str):
            return None
        
        # Remover protocolo y dominio si est√°n presentes
        if 'instagram.com/' in link:
            username = link.split('instagram.com/')[-1]
        else:
            username = link
        
        # Remover barra final y par√°metros
        username = username.rstrip('/').split('?')[0].split('&')[0]
        
        # Remover barras adicionales (en caso de que sea parte de una ruta)
        if '/' in username:
            username = username.split('/')[0]
        
        return username.strip()
    except:
        return None

# Funci√≥n para inicializar el driver
def iniciar_driver():
    options = Options()
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/136.0.0.0 Safari/537.36")
    # Agregar argumentos adicionales para mejor estabilidad
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    service = Service(chromedriver_path)

    try:
        driver = webdriver.Chrome(service=service, options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        return driver
    except Exception as e:
        print(f"Error al iniciar el driver: {e}")
        exit()

def navegar_a_perfil_desde_inicio(driver, usuario_objetivo):
    """
    Navega al perfil del usuario desde la p√°gina principal de Instagram
    """
    try:
        print(f"üè† Volviendo al inicio de Instagram...")
        driver.get('https://www.instagram.com/')
        sleep(random.uniform(3, 5))
        
        print(f"üì± Navegando al perfil de @{usuario_objetivo}...")
        profile_url = f'https://www.instagram.com/{usuario_objetivo}/'
        driver.get(profile_url)
        sleep(random.uniform(4, 6))
        
        # Verificar que el perfil carg√≥ correctamente
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "header"))
        )
        print(f"‚úÖ Perfil de @{usuario_objetivo} cargado correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error al navegar al perfil: {e}")
        return False

def encontrar_boton_seguidores(driver, usuario_objetivo, max_intentos=3):
    """
    Intenta encontrar el bot√≥n de seguidores usando diferentes m√©todos
    Si falla, vuelve al inicio y reintenta
    """
    estrategias = [
        # Estrategia 1: Por href que contenga followers (m√°s confiable)
        (By.XPATH, "//a[contains(@href, '/followers/')]"),
        
        # Estrategia 2: Por texto que contenga n√∫meros + "followers" o "seguidores"
        (By.XPATH, "//a[contains(text(), 'followers') or contains(text(), 'seguidores')]"),
        
        # Estrategia 3: Estructura t√≠pica de Instagram - segundo li en stats
        (By.XPATH, "//header//ul/li[2]//a"),
        
        # Estrategia 4: Por posici√≥n - segundo elemento clickeable en stats
        (By.XPATH, "(//header//ul/li//a)[2]"),
        
        # Estrategia 5: CSS Selector equivalente
        (By.CSS_SELECTOR, "header ul li:nth-child(2) a"),
        
        # Estrategia 6: M√°s espec√≠fico para la estructura actual
        (By.XPATH, "//section/main/div/header//ul/li[2]/div/a"),
    ]
    
    for intento in range(max_intentos):
        print(f"\nüîÑ Intento {intento + 1}/{max_intentos} para encontrar bot√≥n de seguidores")
        
        # Si no es el primer intento, volver al inicio y navegar de nuevo
        if intento > 0:
            print("üîÑ Volviendo al inicio de Instagram antes del nuevo intento...")
            if not navegar_a_perfil_desde_inicio(driver, usuario_objetivo):
                continue
        
        # Intentar cada estrategia
        for i, (by, selector) in enumerate(estrategias, 1):
            try:
                print(f"Intentando estrategia {i}: {selector}")
                element = WebDriverWait(driver, 3).until(
                    EC.element_to_be_clickable((by, selector))
                )
                # Verificar que el elemento sea realmente de seguidores
                href = element.get_attribute('href')
                text = element.text
                if href and 'followers' in href:
                    print(f"‚úÖ Estrategia {i} exitosa. Elemento encontrado: {text}")
                    return element
                elif 'followers' in text.lower() or 'seguidores' in text.lower():
                    print(f"‚úÖ Estrategia {i} exitosa por texto. Elemento encontrado: {text}")
                    return element
            except Exception as e:
                print(f"‚ùå Estrategia {i} fall√≥: {str(e)[:100]}")
                continue
        
        # Si llegamos aqu√≠, todas las estrategias fallaron en este intento
        print(f"‚ùå Intento {intento + 1} fallido. Todas las estrategias fallaron.")
        if intento < max_intentos - 1:
            print(f"‚è≥ Esperando antes del siguiente intento...")
            sleep(random.uniform(5, 8))
    
    return None

def cargar_seguidores_completo(driver, usuario, limite_max=2000, max_intentos_carga=2):
    """
    Carga seguidores haciendo scroll progresivo hasta alcanzar el l√≠mite o no encontrar m√°s
    Si falla durante la carga, vuelve al inicio y reintenta
    VERSI√ìN MEJORADA CON OBTENCI√ìN DE FECHAS DE UNI√ìN
    """
    print(f"üìú Iniciando carga de seguidores de @{usuario} (l√≠mite: {limite_max})...")
    
    for intento_carga in range(max_intentos_carga):
        print(f"\nüîÑ Intento de carga {intento_carga + 1}/{max_intentos_carga}")
        
        # Si no es el primer intento, volver al inicio
        if intento_carga > 0:
            print("üîÑ Volviendo al inicio antes del nuevo intento de carga...")
            if navegar_a_perfil_desde_inicio(driver, usuario):
                # Intentar ir directamente a followers
                driver.get(f"https://www.instagram.com/{usuario}/followers/")
                sleep(random.uniform(4, 6))
        
        seguidores_unicos = dict()  # Usar dict para almacenar username y fecha
        scroll_count = 0
        sin_nuevos_seguidores = 0
        max_sin_nuevos = 5  # M√°ximo de scrolls sin nuevos seguidores antes de parar
        
        # Contadores para estad√≠sticas
        total_links_procesados = 0
        links_filtrados = 0
        
        # Esperar a que aparezca el modal de seguidores
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "[role='dialog'], div[style*='overflow-y']"))
            )
            print("‚úÖ Modal de seguidores detectado")
        except:
            print("‚ö†Ô∏è Modal no detectado, continuando...")
            if intento_carga < max_intentos_carga - 1:
                continue  # Reintentar desde el inicio
        
        # Proceso principal de carga
        try:
            # Primero, recolectar todos los usernames sin obtener fechas
            print("üîç Fase 1: Recolectando usernames de seguidores...")
            usernames_temporales = set()
            
            while len(usernames_temporales) < limite_max:
                scroll_count += 1
                count_anterior = len(usernames_temporales)
                
                print(f"üîÑ Scroll #{scroll_count} - Usernames encontrados: {len(usernames_temporales)}")
                
                # Selectores mejorados para encontrar seguidores
                selectores_seguidores = [
                    # Para modal de seguidores
                    "div[role='dialog'] a[href^='/']:not([href='/'])",
                    "[role='dialog'] a[href*='/']:not([href='/'])",
                    # Para contenedor scrolleable
                    "div[style*='overflow'] a[href^='/']:not([href='/'])",
                    # Gen√©rico para usernames
                    "a[href^='/']:not([href='/'])",
                ]
                
                # Buscar nuevos seguidores
                elementos_encontrados = []
                for selector in selectores_seguidores:
                    try:
                        elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                        if elementos:
                            elementos_encontrados.extend(elementos)
                    except Exception:
                        continue
                
                # Remover duplicados de elementos encontrados
                elementos_unicos = []
                hrefs_vistos = set()
                for elemento in elementos_encontrados:
                    href = elemento.get_attribute("href")
                    if href and href not in hrefs_vistos:
                        hrefs_vistos.add(href)
                        elementos_unicos.append(elemento)
                
                # Procesar elementos encontrados con filtros mejorados
                for elemento in elementos_unicos:
                    if len(usernames_temporales) >= limite_max:
                        break
                        
                    try:
                        link = elemento.get_attribute("href")
                        total_links_procesados += 1
                        
                        if link:
                            # Limpiar y extraer username
                            username = limpiar_username(link)
                            
                            # Aplicar validaci√≥n mejorada
                            if username and es_username_valido(username):
                                # Verificar que no lo hayamos agregado ya
                                if username not in usernames_temporales:
                                    usernames_temporales.add(username)
                                    # Debug: mostrar usernames v√°lidos encontrados
                                    if len(usernames_temporales) % 50 == 0:
                                        print(f"‚úÖ Encontrado: @{username} (Total: {len(usernames_temporales)})")
                            else:
                                links_filtrados += 1
                                # Debug opcional: mostrar qu√© se est√° filtrando
                                if links_filtrados % 20 == 0:
                                    print(f"üö´ Filtrados hasta ahora: {links_filtrados} enlaces no v√°lidos")
                                
                    except Exception:
                        continue
                
                # Verificar si encontramos nuevos seguidores
                nuevos_encontrados = len(usernames_temporales) - count_anterior
                if nuevos_encontrados == 0:
                    sin_nuevos_seguidores += 1
                    print(f"‚ö†Ô∏è No se encontraron nuevos seguidores v√°lidos en este scroll ({sin_nuevos_seguidores}/{max_sin_nuevos})")
                else:
                    sin_nuevos_seguidores = 0
                    print(f"‚úÖ Encontrados {nuevos_encontrados} nuevos seguidores v√°lidos")
                
                # Parar si no hay nuevos seguidores por varios scrolls seguidos
                if sin_nuevos_seguidores >= max_sin_nuevos:
                    print(f"üõë No se encontraron nuevos seguidores despu√©s de {max_sin_nuevos} intentos. Deteniendo...")
                    break
                
                # Hacer scroll hacia abajo en el modal de seguidores
                try:
                    # Buscar el contenedor scrolleable del modal
                    modal_containers = driver.find_elements(By.CSS_SELECTOR, "div[role='dialog']")
                    if modal_containers:
                        # Scroll dentro del modal
                        driver.execute_script(
                            "arguments[0].scrollTop = arguments[0].scrollHeight;", 
                            modal_containers[0]
                        )
                    else:
                        # Fallback: scroll general
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en scroll: {e}")
                
                # Pausa aleatoria para evitar detecci√≥n
                sleep(random.uniform(2, 4))
                
                # Mostrar progreso cada 10 scrolls
                if scroll_count % 10 == 0:
                    print(f"üìä Progreso: {len(usernames_temporales)}/{limite_max} seguidores v√°lidos")
                    print(f"üîç Estad√≠sticas: {total_links_procesados} links procesados, {links_filtrados} filtrados")
            
            # Fase 2: Obtener fechas de uni√≥n para cada username encontrado
            print(f"\nüìÖ Fase 2: Obteniendo fechas de uni√≥n para {len(usernames_temporales)} usuarios...")
            
            # Cerrar el modal de seguidores primero
            try:
                driver.execute_script("document.body.click();")
                sleep(2)
            except:
                pass
            
            # Convertir set a lista para procesar
            usernames_lista = list(usernames_temporales)
            
            for i, username in enumerate(usernames_lista, 1):
                print(f"üìÖ Procesando {i}/{len(usernames_lista)}: @{username}")
                fecha = obtener_fecha_union(driver, username)
                seguidores_unicos[username] = fecha
                
                # Pausa entre cada obtenci√≥n de fecha para evitar detecci√≥n
                sleep(random.uniform(1, 2))
                
                # Mostrar progreso cada 10 usuarios
                if i % 10 == 0:
                    print(f"üìä Progreso fechas: {i}/{len(usernames_lista)} completados")
            
            # Si llegamos aqu√≠ exitosamente, retornar los resultados
            if seguidores_unicos:
                print(f"‚úÖ Carga exitosa en intento {intento_carga + 1}")
                print(f"üìä ESTAD√çSTICAS FINALES:")
                print(f"   - Total links procesados: {total_links_procesados}")
                print(f"   - Links filtrados (no v√°lidos): {links_filtrados}")
                print(f"   - Seguidores v√°lidos encontrados: {len(seguidores_unicos)}")
                print(f"   - Fechas de uni√≥n obtenidas: {len([f for f in seguidores_unicos.values() if f != 'Fecha no encontrada'])}")
                print(f"   - Tasa de filtrado: {(links_filtrados/total_links_procesados*100):.1f}%" if total_links_procesados > 0 else "   - Tasa de filtrado: 0%")
                return seguidores_unicos
                
        except Exception as e:
            print(f"‚ùå Error durante la carga en intento {intento_carga + 1}: {e}")
            if intento_carga < max_intentos_carga - 1:
                print("üîÑ Reintentando desde el inicio...")
                sleep(random.uniform(5, 8))
                continue
    
    # Si llegamos aqu√≠, todos los intentos fallaron
    print(f"‚ùå No se pudo cargar seguidores despu√©s de {max_intentos_carga} intentos")
    return dict()

# Inicializar el driver
driver = iniciar_driver()
driver.maximize_window()

insta_url = 'https://www.instagram.com/'
driver.get(insta_url)
sleep(3)

# Inicio de sesi√≥n
try:
    username_field = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'username')))
    username_field.send_keys(USERNAME)

    password_field = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'password')))
    password_field.send_keys(PASSWORD)

    login_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//button[@type='submit']")))
    login_button.click()

    print("‚ö†Ô∏è Si Instagram solicita verificaci√≥n, ingr√©sala manualmente en el navegador.")
    input("Presiona Enter cuando hayas completado el login/verificaci√≥n en el navegador...")

    sleep(5)
except Exception as e:
    print(f"Error durante el inicio de sesi√≥n: {e}")
    driver.quit()
    exit()

# Verificar que estamos en la p√°gina principal despu√©s del login
current_url = driver.current_url
if 'instagram.com' not in current_url:
    print("üè† Navegando a la p√°gina principal de Instagram...")
    driver.get('https://www.instagram.com/')
    sleep(3)

# Navegar al perfil del usuario especificado desde el inicio
if not navegar_a_perfil_desde_inicio(driver, usuario_objetivo):
    print(f"‚ùå No se pudo navegar al perfil de @{usuario_objetivo}")
    driver.quit()
    exit()

# Verificar si el perfil existe
try:
    # Verificar si la p√°gina carg√≥ correctamente
    page_title = driver.title.lower()
    current_url = driver.current_url.lower()
    
    # Verificar si es una p√°gina de error o perfil no encontrado
    if "page not found" in page_title or "sorry" in page_title or "error" in current_url:
        print(f"‚ùå Error: El usuario @{usuario_objetivo} no existe o no es p√∫blico")
        driver.quit()
        exit()
    
except Exception as e:
    print(f"‚ùå Error al verificar el perfil de @{usuario_objetivo}: {e}")
    print("üí° Verifica que el nombre de usuario est√© escrito correctamente")
    driver.quit()
    exit()

# Buscar y hacer clic en el bot√≥n de seguidores (con reintentos desde inicio)
print("üîç Buscando el bot√≥n de seguidores...")

seguidores_button = encontrar_boton_seguidores(driver, usuario_objetivo, max_intentos=3)

if seguidores_button:
    try:
        # Scroll hasta el elemento para asegurar que est√© visible
        driver.execute_script("arguments[0].scrollIntoView(true);", seguidores_button)
        sleep(2)
        
        # Intentar clic normal primero
        try:
            seguidores_button.click()
            print("‚úÖ Clic exitoso en bot√≥n de seguidores")
        except Exception:
            # Si falla, usar JavaScript click
            print("üîÑ Intentando clic con JavaScript...")
            driver.execute_script("arguments[0].click();", seguidores_button)
            print("‚úÖ Clic con JavaScript exitoso")
        
        sleep(5)
        
    except Exception as e:
        print(f"‚ùå Error al hacer clic en seguidores: {e}")
        print("üîÑ Navegando directamente a la URL de seguidores...")
        driver.get(f"https://www.instagram.com/{usuario_objetivo}/followers/")
        sleep(5)
else:
    print("‚ùå No se pudo encontrar el bot√≥n de seguidores despu√©s de todos los intentos")
    print("üîÑ √öltimo intento: navegando directamente a la URL de seguidores...")
    # Volver al inicio antes del √∫ltimo intento
    navegar_a_perfil_desde_inicio(driver, usuario_objetivo)
    sleep(2)
    driver.get(f"https://www.instagram.com/{usuario_objetivo}/followers/")
    sleep(5)
# AGREGAR ESTOS IMPORTS AL INICIO DE TU ARCHIVO (despu√©s de los otros imports)
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows

# AGREGAR ESTAS FUNCIONES DESPU√âS DE tus funciones existentes (antes del c√≥digo principal)
def generar_excel_completo(seguidores_data, usuario_objetivo):
    """
    Genera un archivo Excel completo con los datos de seguidores y estad√≠sticas
    """
    try:
        # Crear DataFrame con los datos
        datos_para_excel = []
        for i, (username, fecha) in enumerate(seguidores_data.items(), 1):
            datos_para_excel.append({
                "No.": i,
                "Usuario": username,
                "Perfil URL": f"https://www.instagram.com/{username}/",
                "Fecha de Uni√≥n": fecha,
                "Estado Fecha": "‚úÖ Obtenida" if fecha != "Fecha no encontrada" else "‚ùå No disponible"
            })
        
        df_seguidores = pd.DataFrame(datos_para_excel)
        
        # Crear workbook y hojas
        wb = Workbook()
        wb.remove(wb.active)  # Remover hoja por defecto
        
        # HOJA 1: Datos principales
        ws_datos = wb.create_sheet("Seguidores")
        
        # A√±adir t√≠tulo
        ws_datos.merge_cells('A1:E1')
        titulo_cell = ws_datos['A1']
        titulo_cell.value = f"SEGUIDORES DE @{usuario_objetivo.upper()}"
        titulo_cell.font = Font(size=16, bold=True, color="FFFFFF")
        titulo_cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        titulo_cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # A√±adir informaci√≥n de extracci√≥n
        ws_datos.merge_cells('A2:E2')
        info_cell = ws_datos['A2']
        info_cell.value = f"Extra√≠do el: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} | Total: {len(seguidores_data)} seguidores"
        info_cell.font = Font(size=11, italic=True)
        info_cell.alignment = Alignment(horizontal="center")
        
        # A√±adir headers con estilo
        headers = ["No.", "Usuario", "Perfil URL", "Fecha de Uni√≥n", "Estado Fecha"]
        for col, header in enumerate(headers, 1):
            cell = ws_datos.cell(row=4, column=col)
            cell.value = header
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # A√±adir datos
        for row_idx, row_data in enumerate(df_seguidores.itertuples(index=False), 5):
            for col_idx, value in enumerate(row_data, 1):
                cell = ws_datos.cell(row=row_idx, column=col_idx)
                cell.value = value
                
                # Estilo alternado para filas
                if row_idx % 2 == 0:
                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                
                # Color especial para URLs
                if col_idx == 3:  # Columna de URLs
                    cell.font = Font(color="0563C1", underline="single")
                
                # Color para estado de fecha
                if col_idx == 5:  # Columna de estado
                    if "‚úÖ" in str(value):
                        cell.font = Font(color="70AD47")
                    else:
                        cell.font = Font(color="C5504B")
        
        # Ajustar ancho de columnas
        column_widths = [8, 20, 35, 20, 18]
        for i, width in enumerate(column_widths, 1):
            ws_datos.column_dimensions[chr(64 + i)].width = width
        
        # A√±adir bordes
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        for row in ws_datos.iter_rows(min_row=4, max_row=len(seguidores_data) + 4, 
                                     min_col=1, max_col=5):
            for cell in row:
                cell.border = thin_border
        
        # HOJA 2: Estad√≠sticas
        ws_stats = wb.create_sheet("Estad√≠sticas")
        
        # Calcular estad√≠sticas
        fechas_exitosas = len([f for f in seguidores_data.values() if f != 'Fecha no encontrada'])
        porcentaje_fechas = (fechas_exitosas / len(seguidores_data) * 100) if seguidores_data else 0
        
        # A√±adir estad√≠sticas
        stats_data = [
            ["ESTAD√çSTICAS DE EXTRACCI√ìN", ""],
            ["", ""],
            ["Usuario analizado:", f"@{usuario_objetivo}"],
            ["Fecha de extracci√≥n:", datetime.now().strftime('%d/%m/%Y %H:%M:%S')],
            ["Total seguidores extra√≠dos:", len(seguidores_data)],
            ["Fechas de uni√≥n obtenidas:", fechas_exitosas],
            ["Fechas no disponibles:", len(seguidores_data) - fechas_exitosas],
            ["Porcentaje de √©xito (fechas):", f"{porcentaje_fechas:.1f}%"],
            ["", ""],
            ["FILTROS APLICADOS:", ""],
            ["‚úÖ Enlaces con par√°metros eliminados", ""],
            ["‚úÖ IDs temporales eliminados", ""],
            ["‚úÖ P√°ginas especiales filtradas", ""],
            ["‚úÖ Formato de username validado", ""],
            ["‚úÖ Duplicados eliminados", ""],
        ]
        
        for row_idx, (key, value) in enumerate(stats_data, 1):
            ws_stats.cell(row=row_idx, column=1).value = key
            ws_stats.cell(row=row_idx, column=2).value = value
            
            # Estilo para t√≠tulos
            if "ESTAD√çSTICAS" in key or "FILTROS" in key:
                ws_stats.cell(row=row_idx, column=1).font = Font(size=14, bold=True, color="FFFFFF")
                ws_stats.cell(row=row_idx, column=1).fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
                ws_stats.merge_cells(f'A{row_idx}:B{row_idx}')
            elif key and "‚úÖ" not in key and key != "":
                ws_stats.cell(row=row_idx, column=1).font = Font(bold=True)
        
        # Ajustar columnas de estad√≠sticas
        ws_stats.column_dimensions['A'].width = 35
        ws_stats.column_dimensions['B'].width = 25
        
        # HOJA 3: Seguidores con fechas v√°lidas
        seguidores_con_fecha = {k: v for k, v in seguidores_data.items() if v != "Fecha no encontrada"}
        
        if seguidores_con_fecha:
            ws_fechas = wb.create_sheet("Con Fechas de Uni√≥n")
            
            # T√≠tulo
            ws_fechas.merge_cells('A1:D1')
            titulo_fechas = ws_fechas['A1']
            titulo_fechas.value = f"SEGUIDORES CON FECHA DE UNI√ìN ({len(seguidores_con_fecha)})"
            titulo_fechas.font = Font(size=14, bold=True, color="FFFFFF")
            titulo_fechas.fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
            titulo_fechas.alignment = Alignment(horizontal="center")
            
            # Headers
            headers_fechas = ["No.", "Usuario", "Perfil URL", "Fecha de Uni√≥n"]
            for col, header in enumerate(headers_fechas, 1):
                cell = ws_fechas.cell(row=3, column=col)
                cell.value = header
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
                cell.alignment = Alignment(horizontal="center")
            
            # Datos
            for i, (username, fecha) in enumerate(seguidores_con_fecha.items(), 1):
                ws_fechas.cell(row=i+3, column=1).value = i
                ws_fechas.cell(row=i+3, column=2).value = username
                ws_fechas.cell(row=i+3, column=3).value = f"https://www.instagram.com/{username}/"
                ws_fechas.cell(row=i+3, column=4).value = fecha
                
                # Estilo alternado
                if (i+3) % 2 == 0:
                    for col in range(1, 5):
                        ws_fechas.cell(row=i+3, column=col).fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
            
            # Ajustar columnas
            ws_fechas.column_dimensions['A'].width = 8
            ws_fechas.column_dimensions['B'].width = 20
            ws_fechas.column_dimensions['C'].width = 35
            ws_fechas.column_dimensions['D'].width = 20
        
        # Guardar archivo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"seguidores_{usuario_objetivo}_{timestamp}.xlsx"
        wb.save(filename)
        
        return filename, True
        
    except Exception as e:
        print(f"‚ùå Error al generar Excel: {e}")
        return None, False

def mostrar_resumen_final(seguidores_data, usuario_objetivo, filename=None):
    """
    Muestra un resumen final completo de la extracci√≥n
    """
    print("\n" + "="*80)
    print("üéâ ¬°EXTRACCI√ìN COMPLETADA EXITOSAMENTE!")
    print("="*80)
    
    fechas_exitosas = len([f for f in seguidores_data.values() if f != 'Fecha no encontrada'])
    porcentaje_fechas = (fechas_exitosas / len(seguidores_data) * 100) if seguidores_data else 0
    
    print(f"üë§ Usuario analizado: @{usuario_objetivo}")
    print(f"üìä Total seguidores extra√≠dos: {len(seguidores_data)}")
    print(f"üìÖ Fechas de uni√≥n obtenidas: {fechas_exitosas} ({porcentaje_fechas:.1f}%)")
    print(f"‚ùå Fechas no disponibles: {len(seguidores_data) - fechas_exitosas}")
    print(f"‚è∞ Hora de finalizaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    if filename:
        print(f"üìÑ Archivo Excel generado: {filename}")
        print(f"üìÅ Ubicaci√≥n: {os.path.abspath(filename)}")
    
    print("\nüîß FILTROS APLICADOS:")
    filtros = [
        "‚úÖ Enlaces con par√°metros eliminados (?entrypoint, etc.)",
        "‚úÖ IDs temporales filtrados (DJ4EA7ZIaj7, etc.)",
        "‚úÖ P√°ginas especiales excluidas (followers, inbox, etc.)",
        "‚úÖ Formato de username validado",
        "‚úÖ Duplicados eliminados",
        "‚úÖ Fechas de uni√≥n extra√≠das"
    ]
    
    for filtro in filtros:
        print(f"   {filtro}")
    
    print("="*80)

# REEMPLAZAR TODA LA SECCI√ìN desde "# Verificar si estamos en la p√°gina de seguidores" CON ESTO:

# Verificar si estamos en la p√°gina de seguidores
current_url = driver.current_url
if 'followers' in current_url:
    print("‚úÖ Estamos en la p√°gina de seguidores")
    
    # Cargar todos los seguidores (con reintentos desde inicio)
    try:
        seguidores_data = cargar_seguidores_completo(driver, usuario_objetivo, limite_max=100, max_intentos_carga=2)  # Reducido para pruebas
        
        if seguidores_data:
            print(f"\nüéâ ¬°Carga completada! Total de seguidores v√°lidos de @{usuario_objetivo}: {len(seguidores_data)}")
            print("\n" + "="*60)
            print(f"üìã LISTA COMPLETA DE SEGUIDORES V√ÅLIDOS DE @{usuario_objetivo.upper()}:")
            print("="*60)
            
            # Mostrar todos los seguidores encontrados con sus fechas
            for i, (username, fecha) in enumerate(seguidores_data.items(), 1):
                print(f"{i:4d}. üë§ @{username} - {fecha}")
            
            print("="*60)
            print(f"üìä RESUMEN FINAL: {len(seguidores_data)} seguidores v√°lidos extra√≠dos de @{usuario_objetivo}")
            fechas_exitosas = len([f for f in seguidores_data.values() if f != 'Fecha no encontrada'])
            print(f"üìÖ Fechas de uni√≥n obtenidas: {fechas_exitosas}/{len(seguidores_data)} ({fechas_exitosas/len(seguidores_data)*100:.1f}%)")
            print("üîß FILTROS APLICADOS:")
            print("   ‚úÖ Eliminados enlaces con par√°metros (?entrypoint, etc.)")
            print("   ‚úÖ Eliminados IDs temporales (DJ4EA7ZIaj7, etc.)")
            print("   ‚úÖ Eliminadas p√°ginas especiales (followers, inbox, etc.)")
            print("   ‚úÖ Validaci√≥n de formato de username")
            print("   ‚úÖ Eliminaci√≥n de duplicados")
            print("   ‚úÖ Obtenci√≥n de fechas de uni√≥n")
            
            # NUEVA FUNCIONALIDAD: Generar archivo Excel
            print("\nüìä Generando archivo Excel...")
            filename, excel_exitoso = generar_excel_completo(seguidores_data, usuario_objetivo)
            
            if excel_exitoso and filename:
                print(f"‚úÖ Archivo Excel generado exitosamente: {filename}")
                
                # Mostrar resumen final
                mostrar_resumen_final(seguidores_data, usuario_objetivo, filename)
                
                # Mostrar preview de los primeros 10 seguidores
                print(f"\nüìã PREVIEW - PRIMEROS 10 SEGUIDORES:")
                print("-" * 60)
                for i, (username, fecha) in enumerate(list(seguidores_data.items())[:10], 1):
                    print(f"{i:2d}. üë§ @{username:<20} | üìÖ {fecha}")
                
                if len(seguidores_data) > 10:
                    print(f"    ... y {len(seguidores_data) - 10} m√°s en el archivo Excel")
                
            else:
                print("‚ùå Error al generar archivo Excel")
                
                # Fallback: guardar en TXT como respaldo
                print("üíæ Guardando en archivo de texto como respaldo...")
                try:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    txt_filename = f"seguidores_backup_{usuario_objetivo}_{timestamp}.txt"
                    with open(txt_filename, "w", encoding="utf-8") as f:
                        f.write(f"Seguidores de @{usuario_objetivo} - Total: {len(seguidores_data)}\n")
                        f.write(f"Extra√≠do el: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
                        for i, (username, fecha) in enumerate(seguidores_data.items(), 1):
                            f.write(f"{i}. @{username} - {fecha}\n")
                    print(f"‚úÖ Archivo de respaldo guardado: {txt_filename}")
                except Exception as e:
                    print(f"‚ùå Error al guardar archivo de respaldo: {e}")
        else:
            print("‚ùå No se pudieron extraer seguidores v√°lidos")
            
    except Exception as e:
        print(f"‚ùå Error durante la carga de seguidores: {e}")
        
else:
    print("‚ùå No estamos en la p√°gina de seguidores")
    print(f"URL actual: {current_url}")
    print("üí° Intentando navegar directamente a seguidores...")
    driver.get(f"https://www.instagram.com/{usuario_objetivo}/followers/")
    sleep(5)
    # Podr√≠as repetir el proceso aqu√≠ si quieres un reintento

print("\nüîö Proceso finalizado")
print("üí° Tip: Puedes abrir el archivo Excel para ver todos los datos organizados")

# Cerrar driver
driver.quit()
